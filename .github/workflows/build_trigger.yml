name: Docs Build Trigger

on:
  pull_request:
    types: [opened, synchronize]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      make_target:
        description: "Enter make target: html html-noplot docs slimfast slimgallery"
        type: string
        default: 'slimfast'

permissions:
  checks: read
  contents: read

jobs:
  determine-target:
    runs-on: ubuntu-latest
    outputs:
      target: ${{ steps.determine-target.outputs.target }}
    if: |
      (github.event_name == 'issue_comment' && 
        github.event.issue.pull_request != '' && 
        contains(github.event.comment.body, '@napari-bot make')) ||
      github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Determine make target
        id: determine-target
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
          MAKE_TARGET_INPUT: ${{ github.event.inputs.make_target }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -z "$MAKE_TARGET_INPUT" ]; then
              echo "::error::No make target provided in workflow dispatch input."
              exit 1
            fi
            echo "Using manual input target: $MAKE_TARGET_INPUT"
            echo "target=$MAKE_TARGET_INPUT" >> "$GITHUB_OUTPUT"
          else
            # Safely handle comment body through environment variable
            TARGET=$(echo "$COMMENT_BODY" | grep -oP '(?<=make\s)\w+' || echo "slimfast")
            ALLOWED_TARGETS="html html-noplot docs slimfast slimgallery"
            if ! grep -qw "$TARGET" <<< "$ALLOWED_TARGETS"; then
              echo "::error::Invalid target '$TARGET'. Allowed targets: $ALLOWED_TARGETS"
              exit 1
            fi
            echo "Using comment target: $TARGET"
            echo "target=$TARGET" >> "$GITHUB_OUTPUT"
          fi

  trigger-circleci:
    needs: determine-target
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      MAKE_TARGET: ${{ needs.determine-target.outputs.target }}
    steps:
      - name: Trigger CircleCI Pipeline
        run: |
          # Validate branch name isn't empty
          if [ -z "$BRANCH_NAME" ]; then
            echo "::error::Branch name is empty"
            exit 1
          fi

          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Circle-Token: ${{ secrets.CIRCLECI_TOKEN }}" \
            -d '{
              "branch": "'"$BRANCH_NAME"'",
              "parameters": {
                "make_target": "'"$MAKE_TARGET"'"
              }
            }' \
            "https://circleci.com/api/v2/project/gh/psobolewskiPhD/napari-docs/pipeline"

  trigger-artifact-build:
    needs: determine-target
    uses: ./.github/workflows/build_docs.yml
    with:
      make_target: ${{ needs.determine-target.outputs.target }}

  report-status:
    needs: [determine-target, trigger-artifact-build]
    runs-on: ubuntu-latest
    permissions:
      checks: write
      actions: read
    steps:
      - name: Create Initial Check Run
        uses: actions/github-script@v7
        id: create-check
        with:
          script: |
            const check = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "ðŸ“š Documentation Build",
              head_sha: "${{ github.event.pull_request.head.sha }}",
              status: "in_progress",
              output: {
                title: "Build in progress",
                summary: "Waiting for reusable workflow to complete..."
              }
            });
            return check.data.id;

      - name: Wait for Reusable Workflow
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build_docs.yml',
              head_sha: "${{ github.event.pull_request.head.sha }}",
              event: 'workflow_call',
              per_page: 1
            });

            const runId = runs.workflow_runs[0].id;
            let status = 'queued';
            
            while (status !== 'completed') {
              await new Promise(resolve => setTimeout(resolve, 10000));
              const { data: run } = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: runId
              });
              status = run.status;
            }

            return run.conclusion;

      - name: Update Check Run
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ steps.create-check.outputs.result }},
              status: "completed",
              conclusion: "${{ steps.wait.outputs.result }}",
              output: {
                title: "Build completed",
                summary: "View reusable workflow logs",
                text: "Documentation build finished with status: ${{ steps.wait.outputs.result }}"
              }
            });