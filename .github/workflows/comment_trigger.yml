name: Trigger target build of docs

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      make_target:
        description: "Enter make target: html html-noplot docs slimfast slimgallery"
        type: string
        default: "slimfast"

permissions:
  statuses: write
  actions: read
  contents: read

jobs:
  determine-target:
    runs-on: ubuntu-latest
    outputs:
      target: ${{ steps.determine-target.outputs.target }}
      pr_ref: ${{ steps.get-pr-info.outputs.pr_ref }}
    if: |
      (github.event_name == 'issue_comment' &&
        github.event.issue.pull_request != '' &&
        contains(github.event.comment.body, '@napari-bot make')) ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Add eyes reaction
        # show that workflow has started
        if: github.event_name == 'issue_comment'
        run: |
          COMMENT_ID=${{ github.event.comment.id }}
          curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/$COMMENT_ID/reactions" \
            -d '{"content": "eyes"}' || echo "Failed to add reaction"

      - name: Determine make target
        id: determine-target
        run: |
          ALLOWED_TARGETS="html html-noplot docs slimfast slimgallery"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TARGET="${{ github.event.inputs.make_target }}"
          else
            TARGET=$(echo "${{ github.event.comment.body }}" | grep -oP '(?<=@napari-bot make\s)\w+' || echo "slimfast")
          fi

          if ! echo "$ALLOWED_TARGETS" | grep -qw "$TARGET"; then
            echo "::error::Invalid target '$TARGET'. Allowed: $ALLOWED_TARGETS"
            exit 1
          fi

          echo "target=$TARGET" >> "$GITHUB_OUTPUT"

      - name: Get PR details
        # extract PR number and branch name from issue_comment event
        if: github.event_name == 'issue_comment'
        id: get-pr-info
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            core.setOutput('pr_ref', pr.data.head.ref);

  trigger-circleci:
    needs: determine-target
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        if: needs.determine-target.outputs.pr_ref
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-target.outputs.pr_ref || github.ref }}
      - name: Run CircleCI pipeline
        uses: CircleCI-Public/trigger-circleci-pipeline-action@v1.2.0
        with:
          GHA_Meta: ${{ needs.determine-target.outputs.target }}
        env:
          CCI_TOKEN: ${{ secrets.CIRCLECI_TOKEN }}

  trigger-artifact-build:
    needs: determine-target
    uses: ./.github/workflows/build_docs.yml
    with:
      make_target: ${{ needs.determine-target.outputs.target }}
      pr_ref: ${{ needs.determine-target.outputs.pr_ref }}
