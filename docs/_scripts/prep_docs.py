"""Master documentation preparation script for napari.

This script coordinates all documentation generation tasks that need to run before
the Sphinx build process. It serves as the central orchestrator for various
documentation automation scripts, ensuring all dynamic content is generated and
ready for the main documentation build.

The script handles two modes:
1. Full mode: Generates all documentation including cloning npe2 for plugin docs
2. Stubs mode: Creates placeholder files for faster development builds

This script is typically called by the Makefile during documentation builds and
ensures all auto-generated content (plugin docs, preference docs, event tables,
UI architecture docs) is created before Sphinx runs.

Usage:
    Full documentation generation::

        $ python docs/_scripts/prep_docs.py

    Fast stub generation for development::

        $ python docs/_scripts/prep_docs.py --stubs

Note:
    Make no assumptions about the working directory from which this script
    will be called. All paths are calculated relative to the script location.

Attributes:
    DOCS (Path): Absolute path to the docs directory
    NPE (Path): Path where npe2 repository will be cloned

Functions:
    prep_npe2(): Clones npe2 repository and generates plugin documentation
    main(stubs): Orchestrates all documentation preparation tasks

Attribution
-----------
This docstring was drafted with the assistance of Claude Code.
The output was reviewed and edited for accuracy and clarity.
"""
import sys
from pathlib import Path
from importlib.metadata import version

from packaging.version import parse

DOCS = Path(__file__).parent.parent.absolute()
NPE = DOCS.parent.absolute() / 'npe2'

def prep_npe2():
    #   some plugin docs live in npe2 for testing purposes
    if NPE.exists():
        return
    from subprocess import check_call

    npe2_version = version("npe2")

    check_call(f"rm -rf {NPE}".split())
    check_call(f"git clone https://github.com/napari/npe2 {NPE}".split())
    if not parse(npe2_version).is_devrelease:
        check_call(f"git -c advice.detachedHead=false checkout tags/v{npe2_version}".split(), cwd=NPE)
    check_call([sys.executable, f"{NPE}/_docs/render.py", DOCS / 'plugins'])
    check_call(f"rm -rf {NPE}".split())


def main(stubs=False):
    if stubs:
        #prep_npe2()
        # Generate stub files for plugin docs
        plugin_docs = {
            "plugins/_npe2_sample_data_guide.md": "(sample-data-contribution-guide)=\n",
            "plugins/_npe2_readers_guide.md": "(readers-contribution-guide)=\n",
            "plugins/_npe2_widgets_guide.md": "(widgets-contribution-guide)=\n",
            "plugins/_npe2_menus_guide.md": "(menus-contribution-guide)=\n",
            "plugins/_npe2_manifest.md": "# Manifest Reference\n",
            "plugins/_npe2_writers_guide.md": "(writers-contribution-guide)=\n",
            "plugins/_npe2_contributions.md": "# Contributions Reference\n(contributions-themes)=\n(contributions-commands)=\n(contributions-widgets)=\n(contributions-readers)=\n(contributions-writers)=\n(contributions-sample-data)=\n(layer-type-constraints)=\n",
        }
        for doc, target in plugin_docs.items():
            file_path = DOCS / doc
            if not file_path.exists():  # Avoid overwriting existing files
                file_path.write_text(
                    f"{target}This is a stub. The real file is autogenerated in a full build.",
                    encoding="utf-8",
                )
        # Generate stub files from the other scripts
        __import__('update_preference_docs').main(stubs=True)
        __import__('update_event_docs').main(stubs=True)
        __import__('update_ui_sections_docs').main(stubs=True)
    else:
        prep_npe2()
        __import__('update_preference_docs').main()
        __import__('update_event_docs').main()
        __import__('update_ui_sections_docs').main()


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Prepare documentation files.")
    parser.add_argument(
        "--stubs",
        action="store_true",
        help="Generate stubs versions of the documentation files.",
    )
    args = parser.parse_args()

    main(stubs=args.stubs)
