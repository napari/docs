"""ALL pre-rendering and pre-preparation of docs should occur in this file.

Note: make no assumptions about the working directory
from which this script will be called.
"""
import sys
from pathlib import Path
from importlib.metadata import version

from packaging.version import parse

DOCS = Path(__file__).parent.parent.absolute()
NPE = DOCS.parent.absolute() / 'npe2'

def prep_npe2():
    #   some plugin docs live in npe2 for testing purposes
    if NPE.exists():
        return
    from subprocess import check_call

    npe2_version = version("npe2")

    check_call(f"rm -rf {NPE}".split())
    check_call(f"git clone https://github.com/napari/npe2 {NPE}".split())
    if not parse(npe2_version).is_devrelease:
        check_call(f"git -c advice.detachedHead=false checkout tags/v{npe2_version}".split(), cwd=NPE)
    check_call([sys.executable, f"{NPE}/_docs/render.py", DOCS / 'plugins'])
    check_call(f"rm -rf {NPE}".split())


def main(stubs=False):
    if stubs:
        # Generate stub files for plugin docs
        plugin_docs = [
            "plugins/_npe2_sample_data_guide.md",
            "plugins/_npe2_readers_guide.md",
            "plugins/_npe2_widgets_guide.md",
            "plugins/_npe2_manifest.md",
            "plugins/_npe2_writers_guide.md",
            "plugins/_npe2_contributions.md",
        ]
        for doc in plugin_docs:
            file_path = DOCS / doc
            if not file_path.exists():  # Avoid overwriting existing files
                file_path.write_text(
                    "This is a stub. The real file is autogenerated in a full build.",
                    encoding="utf-8",
                )
        # Generate stub files from the other scripts
        __import__('update_preference_docs').main(stubs=True)
        __import__('update_event_docs').main(stubs=True)
        __import__('update_ui_sections_docs').main(stubs=True)
    else:
        prep_npe2()
        __import__('update_preference_docs').main()
        __import__('update_event_docs').main()
        __import__('update_ui_sections_docs').main()


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Prepare documentation files.")
    parser.add_argument(
        "--stubs",
        action="store_true",
        help="Generate stubs versions of the documentation files.",
    )
    args = parser.parse_args()

    main(stubs=args.stubs)
